<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd" version="EE-3.5.0">
    
    <batch:job name="syncBatchA" max-failed-records="1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>
            
            <batch:step name="getUserInBStep" >
                <enricher source="#[payload]" target="#[recordVars['userInTargetInstance']]" doc:name="store user">
	            	<sfdc:query-single config-ref="SalesforceB" query="SELECT Id, Email, LastModifiedDate FROM User WHERE (Email = '#[payload['Email']]')" doc:name="query user from B"/>
                </enricher>
            </batch:step>
            
            <batch:step name="upsertUserInBStep" accept-expression="(recordVars['userInTargetInstance'] is NullPayload || recordVars['userInTargetInstance'].get('LastModifiedDate') &lt; payload.get('LastModifiedDate') &amp;&amp; '${sfdc.a.integration.user.id}' != payload.get('LastModifiedById'))">
				<expression-component doc:name="prepare user for upsert"><![CDATA[payload.remove('LastModifiedById');
payload.remove('LastModifiedDate');

if(!(recordVars['userInTargetInstance'] is NullPayload)) {
	payload.put('Id',recordVars['userInTargetInstance'].get('Id'));
	payload.remove('Username');
} else {
	// Each Username should be UNIQUE even between different sandboxes of a single instance
	payload.put('Username',  payload['Username'] + '.target');
	payload.put('CommunityNickname',  payload['CommunityNickname'] + '.target');
}

// We map the profile IDs from SalesForce instance A to B, each profileId from the left (source instance) will be map to the one on the right (target instance)
profilesMap = ${from.A.to.B.profilesMap};
payload.put('ProfileId', profilesMap.get( payload['ProfileId'] ));
]]></expression-component>
                <batch:commit size="200" doc:name="Batch Commit">
			        <sfdc:upsert config-ref="SalesforceB" externalIdFieldName="Id" type="User" doc:name="upsert user in B">
			            <sfdc:objects ref="#[payload]"/>
			        </sfdc:upsert>
			        <logger message="Upsert Salesforce B response: #[payload]" level="INFO" doc:name="log response"/>
                </batch:commit>
            </batch:step>

            
        </batch:process-records>
        <batch:on-complete>
            <expression-component doc:name="Expression"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
        </batch:on-complete>
    </batch:job>

    <batch:job name="syncBatchB" max-failed-records="1">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>

            
            <batch:step name="getUserInAStep" >
                <enricher source="#[payload]" target="#[recordVars['userInTargetInstance']]" doc:name="store user">
		            <sfdc:query-single config-ref="SalesforceA" query="SELECT Id, Email, LastModifiedDate FROM User WHERE (Email = '#[payload['Email']]')" doc:name="query user from A"/>
                </enricher>
            </batch:step>
            
            <batch:step name="upsertUserInAStep" accept-expression="(recordVars['userInTargetInstance'] is NullPayload || recordVars['userInTargetInstance'].get('LastModifiedDate') &lt; payload.get('LastModifiedDate') &amp;&amp; '${sfdc.b.integration.user.id}' != payload.get('LastModifiedById'))">
				<expression-component doc:name="prepare user for upsert"><![CDATA[payload.remove('LastModifiedById');
payload.remove('LastModifiedDate');

if(!(recordVars['userInTargetInstance'] is NullPayload)) {
	payload.put('Id',recordVars['userInTargetInstance'].get('Id'));
	payload.remove('Username');
} else {
	// Each Username should be UNIQUE even between different sandboxes of a single instance
	payload.put('Username',  payload['Username'] + '.target');
	payload.put('CommunityNickname',  payload['CommunityNickname'] + '.target');
}

// We map the profile IDs from SalesForce instance A to B, each profileId from the left (source instance) will be map to the one on the right (target instance)
profilesMap = ${from.B.to.A.profilesMap};
payload.put('ProfileId', profilesMap.get( payload['ProfileId'] ));]]></expression-component>
                <batch:commit size="200" doc:name="Batch Commit">
			        <sfdc:upsert config-ref="SalesforceA" externalIdFieldName="Id" type="User" doc:name="upsert user in A">
			            <sfdc:objects ref="#[payload]"/>
			        </sfdc:upsert>
			        <logger message="Upsert Salesforce A response: #[payload]" level="INFO" doc:name="log response"/>
                </batch:commit>
            </batch:step>
            
        </batch:process-records>
        <batch:on-complete>
            <expression-component doc:name="Expression"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
        </batch:on-complete>
    </batch:job>
    
</mule>
